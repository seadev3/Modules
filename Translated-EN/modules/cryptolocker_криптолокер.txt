CRYPTOLOKER AND ADMIN
TECHNICAL TASK


GOAL

Write a cryptolocker and a backend/admin panel for it, taking into account the current market realities.


ROLES IN THE SYSTEM

There are the following roles:
- admin (we)
- advert (partner, registers in our system to earn money)
- victim
- recovery (intermediary between the victim and us, plays for the victim)


BUSINESS MODEL AND PAYMENTS

All payments to adverts go in transit through our wallets.
The victim pays to a bitcoin address linked to the system owner's wallet.
From this wallet money is sent to adverts; our commissions are deposited in the wallet.
Thus, the advert DOES NOT CONTROL the bitcoin addresses that are indicated on the landing pages,
and MAY NOT indicate their addresses AND CONTACTS on the landing page.
In general, the landing page must pass a strict qualification system.

When an advert creates a new target, we assign one of our bitcoin addresses to the target.
This address is selected from a pool of addresses (linked to our wallet) set in the system settings.

The system tracks the movement to the addresses assigned to the adverts, and forwards all incoming payments minus the advert commission
to the addresses indicated by the adverts themselves.

Such a scheme requires increased security when working with a master wallet. Only the owner of the system should have access to it.
Just like on crypto exchanges.

Recovery companies have a special role in this business, and it requires specific software support.
Recovery usually ask us for a discount, buy the unlocker, and sell it to the victim at a nominal price.
Their profit is this discount.
Therefore, to support these actions, there are the following functions:
- private chat and clear chat history
- commands in the chat to hide the unlocker and manage the landing page.
Their meaning is to hide from the victim the fact that the unlocker is available.


BOT LOCKER

0. The bot must check its IP against online geo-databases.
THE PRESENCE OF AN IP ADDRESS IN THE CIS ZONE LEADS TO AN IMMEDIATE TERMINATION OF WORK AND REMOVAL FROM THE DISK!
See item 7 for how to get your external address.

1. The bot must ensure its persistence in the system (to be saved between reboots).
https://habr.com/en/post/425177/

2. The bot should receive the maximum possible privileges in the system:

3. The bot must bypass UAC:
https://github.com/hfiref0x/UACME
(working methods somewhere around the mid-30s..)
Do not try on a personal car! can damage the OS.

4. When installed in the system, the bot must generate an ID.
The bot ID is a string consisting of two components separated by a dot.
The first part has the format %MACHINE%-%USER%_XYYYYYYY, where
MACHINE - computer name
USER - username
X - a symbol indicating the type of system on which the client is running
(W - windows, L - linux, A - android, M - Mac OS),
YYYYYYY - 3-7 digits containing the major-version, minor-version and build of the operating system if the systems have them
(for example, for 6.1 build 7600 it will be 617600).
The second part contains 32 random characters 0-9, A-F.
An example client id is HOSTNAME-USER_W617600.11223344556677889900AABBCCDDEEFF.
The parameter is not case sensitive.

5. The name of his group is hardcoded in the bot - a string of six characters, the first three characters are lowercase Latin, the rest are numbers.

6. A builder must be attached to the bot, flashing its group and other essential parameters into the bot at the linking stage.
The task of the builder is to flash mutable resources into the bot, while not giving access to the source code.

The following scheme is proposed:
- the builder receives .obj files as input
- containing mutable resources (group, etc.) .obj-file is compiled from source (or processed by some utility)

7. The bot must collect the following information about the environment:
- OS version and build
- list of network interfaces with IP addresses
- external IP address
https://habr.com/ru/company/emercoin/blog/335458/
https://github.com/emercoin/emercoin/blob/master/src/stun.cpp
// list of installed programs

This data is transmitted to the command and control server.
The bot receives the C&C address via the Emercoin DNS domain resolution.

8. After installation and fixing in the system, the bot starts to encrypt files in the system according to the following algorithm:
8.1. Encryption algorithm - as a variant of ChaCha or other streaming asymmetric cipher.
Crypto algorithm requirements:
- streaming (designed for fast stream processing)
- fast
- asymmetric (there are private and public keys)
- there is an open implementation in C.
We do not try to implement cryptoalgorithms on our own, we take only ready-made options!
8.2. The program encrypts files with a public key embedded in it.
After processing the file, a file with the same name and double extension .txt.crypted is created next to it,
containing landing text.
8.2.1. We take into account that the file extension is the number 1 signature for antiviruses.
Perhaps you need to use standard extensions (.txt) as much as possible instead of non-standard ones (.crypted, .crypt, etc.).
8.3. The program works in one of two modes: fast or full.
In fast mode, only the first megabyte of the file is encrypted. This is necessary to quickly cover the system.
Full mode encrypts the entire file.
8.4. Before starting work, the program kills the processes from the list and stops the services from the list.
In case of errors, the program tries to repeat the action three times with an interval of 2 minutes.
Further work does not depend on the result of this step.
8.5. The program first processes directories from a special "quick" list - a list of directories,
which must be passed first.
8.6. The program DOES NOT TOUCH files and directories from a special stop list - a list of files that cannot be touched.

In this case, combinations of a quick list and a stop list are processed as follows:
8.6.1. We cover all paths from the quick list that are not in the stop list
8.6.2. If the entire disk is in the stop list, on this disk we cover only the paths from the quick list, without touching the rest of the disk
8.6.3. If the stop list is empty, we cover the folders from the quick list first; other files later.

8.7. The program encrypts only files with extensions from the list of working extensions; the rest are ignored.
8.8. The program removes files from a special list, overwriting their contents three times:
- first time constant 0
- the second time by the constant FF
- third time by random garbage
- the fourth time the file is deleted
8.9. The program treats all disks in this way.
All errors during operation are ignored.

So there are the following lists:

9. List of changeable settings in the program:
9.1. Group
9.2. Encryption key
9.3. list of processes and services
9.4. quick list
9.5. stop list
9.6. list of working extensions
9.7. list to delete
9.8. landing page text
9.9. command server address
All these data (except 9.1, 9.9) the program tries to request from the command and control server via the TOR network, ten attempts, interval 1 minute.
If it fails, the program uses the values ​​hardwired into it, periodically resuming attempts to update the settings.

API BACKEND

POST /HELLO HTTP/1.1

The request is executed at the start of the program (both initial and repeated after a reboot).
The content of the HTTP request body is an application/x-www-form-urlencoded container with the following fields:
cid - client ID
group - client group
ip1 - address of the first network interface
ip2 - address of the second network interface
...
ipN - external IP address

If the bot receives a 406 response and a Not allowed response, the bot will immediately stop running and be removed from disk.
In turn, the backend must issue this code and a response if it detects that any of the IP addresses provided in the request
located in the CIS zone.

GET /<cid>/<group>/<setting> HTTP/1.1

Customization request. Here
<cid> - client ID
<group> - client group
<setting> - setting, enum from
key (public encryption key)
services (a list of processes and services - separated by a semicolon. If the field contains the substring .exe, this is the name of the process. If not, this is the name of the service.)
priority (quick list)
stoplist (stop list)
ext (list of extensions)
wipe (list to delete)
landing (landing page)
The list format is semi-colon delimited.
The landing page is given as is, UTF8 encoding.
The key is a WinCrypt-friendly format (wrapped in base64 if necessary).

POST /<cid>/<group>/stat

Sending statistics
The content of the HTTP request body is an application/x-www-form-urlencoded container with the following fields:
total - total files processed
crypted - total files encrypted
wiped - total files removed
ignored - total files skipped

Statistics are sent every 15 minutes, the time is set by a constant in the program.


LANDING PAGE

There are two landing pages in total:
- on the computer
- in the Internet.

On the computer, next to the encrypted file, there is a text file with the same name and a different extension.
This file should contain a simple link to a page in the .onion domain and instructions on how to download the tor browser.
For now, let's assume that the path to the landing page is the base .onion domain plus the path equal to md5(bot ID).
It's simple, and doesn't brute-force to pick up pages of other targets.

If the tor domain was specified in the target properties, then the page should also open on this domain.
Automatic management of tor domains is a separate issue.
You can prepare 100,500 of them and assign them from blanks.

The landing page is subject to a strict requirement to prohibit direct contact with the victim, except through our chat:
- anything that looks even a little bit like a bitcoin address should be severely rejected when loading page text into the admin area,
and be deleted when the page text is saved.
- instead, the payout address should be replaced by a macro. Well, let's say %PAYMENT_ADDRESS%
- the advert's contacts (email, jabber and all possible phones, instant messengers, IRC, etc.) should not be included in the text.
When updating the page text in the admin panel, you need to automatically check and reject pages with attempts
register contacts and wallets on them.
It is probably also possible to do some kind of pre-moderation, with the approval of changes on the pages by our system operators.

In general, you can make a custom landing page only for advanced users, but for most
make typical texts, with the substitution of basic data from macros.

Macros:
%PAYMENT_ADDRESS% - bitcoin wallet to pay out (taken from target profile)
%DOUBLE_DATE% - date of payment doubling
%LANDING_URL% - link for the landing file - the base URL to which the bot will attach its id to get a full link to the landing page on the Internet


The appearance of the pages is approximately the following (samples of competitors):
http://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/837F964AF6B77803#info
http://aplebzu47wgazapdqks6vrcv6zcnjppkbxbr6wketf56nf6aq2nmyoyd.onion/F32917DB2AA982C9#info

Don't plagiarize! process creatively.
The meaning must be kept:
- there should be info on how to buy bitcoins, a list of sites and exchanges
- enter the chat
- form for test file decryption.

Test file decryption can be used only once and only for image files,
because they usually do not carry important information.
When returning an expanded result, you need to check the contents of the file by signatures.
If the signature of any of the allowed types does not match, do not return the content and write atata.
Allowed types: jpg, png, gif, bmp.

The page changes its appearance depending on the state of the target:
- if the target has not paid and the next payment period has not expired, the page has a normal view
- if the target has not paid and the next payment period has expired, there is a warning and a new amount on the page (doubles every period)
- if the target has paid, a link to download the unlocker is available.

IMPORTANT: the payout amount on the landing page is ALWAYS displayed without the discount!
IMPORTANT: the visibility of the link to the unlocker is ALWAYS controlled by the corresponding flag from the properties of the target (see below - the target has a separate flag
"Unlocker is available"), NOT a PAYMENT FLAG!

IMPORTANT: the appearance of landing pages can be controlled by commands from the chat after FIXING THE FACT OF PAYMENT to our bitcoin address
(it is necessary to have a transaction with the required amount to the address assigned by us from the target profile).
Two things can change:
- switching the page between the type "not paid" and "paid" and resp. availability of link to unlocker
- bitcoin address for payment.
All these actions are done by the recovery, only after he paid us and we fixed it.
BEFORE PAYMENT, these actions are NOT AVAILABLE!


ADMIN

In the admin panel (by admin panel we mean not only the part of the system accessible to administrators, but also the web application in general) there are several roles:
- admin - sees everything, creates any accounts
- advert - sees only his own data, does not see the data of a neighboring advert, sees chats for his bots and goals.
- victim - sees only his chat


ADMINISTRATOR SECTION

Here is a list of pages visible only to the admin (the name of the page and the list of properties or information on it):

* Dashboard with statistics:
- total adverts
- total bots
- active bots for the last day
- total payments

* System settings
- a list (pool) of free bitcoin addresses that can be assigned to advert targets.
Only those that have not yet been assigned to advert targets are available for editing.
This page will be read-only in the implementation with automatic clearing (see below)

* Account management (advert profiles)
This page contains a list of adverts (accounts) with the following table columns:
- name
- commission (in percent)
- (per/time) block advert
- edit advert
And also the button
- create a new advert

Account blocking implies that the advert will no longer be able to log into his account.
All payments to his wallet are suspended.

When a new advert is created, it is assigned a bitcoin address by the PROXY system, to which payments from the victims go.
This address is not visible to the advert itself.

In editing the advert profile, you can change the fields:
- name
- commission
- advert's personal bitcoin address (THIS IS NOT THE ADDRESS that WE will assign to the target!)
This is the SECOND address, which is available for editing to both the admin and the advert himself.
See the PAYOUTS section for address assignments.
- output through the mixer
- mixer bitcoin address
- mixing time
- mixing commission
These fields require clarification - depends on what features the bitmix API provides.
Perhaps the mixing time and commission are not controlled by us, but are assigned automatically by the mixer.

For each advert, extended statistics should also be visible
- total profit
- total bots
This stat should not be generated when the page is opened, but should be loaded using a separate button/link
(we do this because the stat most likely makes heavy queries to the database).


ADVERT SECTION

Here is the list of pages visible to the advert.

* Goals
The following fields are visible in the list:
- title
- Group
- number of bots
- last bot activity time
- edit
- list of bots (opens a separate page, see below)
- delete/archive.
Also at the top of the page is the "Add" button.

You can only delete a target that has been hit by 0 bots.
The goal for which there were backoffs (i.e. there is information about bots with the specified group in the database) can only be sent to the archive.
An archive is a separate section with goals in which everything is the same and only for viewing.

When creating/editing a goal, there are the following fields:
** general
- title
- short name of the group, validated according to the following rule:
a string of 6 characters, the first three are Latin in lower case, the rest are numbers.
The group is a unique field, and is the identifier of the target in the system. The "name" field is used inside the admin panel
for ease of display; the "group" field is used in various requests and interactions between parts of the system.
- status: paid / not paid (set both manually and automatically by payment scripts)
If there was a payment, you need to display a list of payments from the bitcoin network with links to the transaction
in any blockchain explorer.
Those. the operator must know whether the payment was made, or the payment flag was set manually.
- nickname for chat (operator by default)
** payment
- bitcoin payout address (personal)
- recovery bitcoin address (optional); its purpose - see CHATS section
- payout amount
- payment deadline, after which doubling starts (from here on, the fields are optional)
- payment doubling interval, in days
- available discount (for recovery companies), in percent (none by default, i.e. value 0)
Disabled by default. See also the section "CHATS" about disabling this option from the chat.
** landing
- tor-domain (optional)
- landing text on the site (it is possible to make this an additional option, and use standard text by default)
- landing text in a file
- "unlocker available" - flag (checkbox), whether the unlocker is available for download on the landing page
- flag "test decryption available" (cleared when using test decryption)
** locker settings
- key type (private/group)
Here the difference seems to be only in how many bots can use one key.
- private and public keys in a human-readable form
ATTENTION! SEE ABOUT THE VALIDATION OF LANDING TEXTS IN THE RELEVANT SECTION!!!
- list of stopped services and processes
- list of priority directories
- list of ignored paths and masks
- list of working extensions
- list to delete
All lists are separated by ; (semicolon) valid Windows path and file masks.
In addition, the target's properties store the private encryption key, the locker program, and the unlocker program.
These properties are generated by the system when the target is created and are only available for viewing/downloading.

When creating a new goal, a new bot build is generated for it and saved in the database/on disk.
The following data is passed to the bot creation script:
- newly generated encryption key
- landing text for file
- list of stopped services and processes
- list of priority directories
- list of ignored paths and masks
- list of working extensions
- list to delete
In response, the bot script creates two binaries - a locker and an unlocker.
The specified properties are flashed into these binaries.

If a separate tor domain is specified for the goal, then you need to ensure that the landing page works through it.
Accordingly, it is necessary to automate the creation and raising of such domains.
Alternatively, domains can be prepared in advance in the amount of HHH pieces, and the user will simply select them from the pool
(or it will be automatically assigned to him).


* Bots
This is an information page with a list of bots for a specific selected target, sorted by date of last activity and fields:
- CID
- group
-target
- last activity
- chat
When entering the bot page, in addition to this information, information about the system collected by the bot should also be available.


CHATS

There are two ways to enter the chat:
- from the goal/bot page in the admin panel (operator/advert)
- from the landing page (victim/recovery)
Anyone with a link can enter the chat from the landing page.
The mode of operation when several people enter the chat from different addresses or browsers is not prohibited.
The only condition is that the nicknames of such users must necessarily differ.

The advert's nickname in the chat is taken from his settings.
The link to the chat is generated on the landing page in such a way that it cannot be guessed by brute force (i.e., an element of randomness is introduced).

Chat is tied to a target:
- if the target is with a group key, then each bot from the group gets into the same chat
- if the target is with a private key, then one bot has a separate chat.

Adverts can only see their own chats, admins can see everything.

When entering the chat, the victim is given an invitation (similar to IRC channels) and
a message stating that you can type /help to see the available commands.

The chat has the following commands:
/help
displays text about the private and clear commands with their description.
unpaid command removed from tooltip

/private
Makes the chat invisible to other chat participants from the victim's side (i.e. if more than one person
sits in the chat from the side of the victim).
From the side of the admin / advert, it does not affect anything - the chat history is visible in full.

/clear
Clearing the chat history from the victim's side.
From the side of the admin / advert, it does not affect anything - the chat history is visible in full.

/unpaid
Turns off the "link to unlocker available" flag.
This and subsequent commands are reported in the chat by the advert, for the recovery company, after reaching an agreement on payment and discount.
no more // -Available ONLY after receiving payment to the target's bitcoin address.- crossed out
THE COMMAND IS NOT AVAILABLE when setting the "paid" flag manually from the admin panel!
The command turns off the "unlocker available" flag in the target's profile, and accordingly changes the appearance of the landing page.

/bitcoin <bitcoin address>
Changes the payout wallet address on the landing page.
Available ONLY after receiving payment to the target's bitcoin address.
THE COMMAND IS NOT AVAILABLE when setting the "paid" flag manually from the admin panel!

/paid
Sets the flag "paid".
AVAILABLE ONLY after receiving payment to the target's bitcoin address.
THE COMMAND IS NOT AVAILABLE when setting the "paid" flag manually from the admin panel!
The command turns on the "unlocker available" flag in the target's profile, and accordingly changes the appearance of the landing page.

The commands are intended exclusively for recovery actions.
The general scenario is this:
- recovery opens private chat
- the recovery is presented and agrees on a discount / payment terms
- in response, the operator from our side tells him a command to hide the fact of payment - /unpaid
- recovery uses the /unpaid command to turn off the link to the unlocker and /bitcoin to change the bitcoin payout address on the landing page
This must be done BEFORE payment!
- after confirming the fact of payment, the operator in a private chat gives a recovery link to the unlocker
- after receiving payment from the victim to your address, the recovery can switch the page view to give the victim access to the unlocker.

CRYPTOCURRENCIES

We want to support other cryptocurrencies besides bitcoin - more
*dash
*zcash
* monero
Everything that is written in this TOR regarding bitcoin must also be implemented for these cryptocurrencies.
For example, if you want to specify a bitcoin address in the properties of a record in the database, then you must also specify the addresses
for other currencies.


CLEARING AND PAYMENT SCRIPTS

Clearing is a settlement with adverts, paying them what is due.

Depending on which clearing scheme will be chosen (manual or automatic),
there will be different complexity and convenience of the system.

Manual clearing:
+ fully protected from wallet theft by staff and competitors
- requires additional daily work on the distribution of funds
- requires additional manual work on system maintenance (address generation)

Automatic clearing:
+ you can fully automate everything
- your wallet is available to everyone who has access to the system (a matter of trust).

Purpose of payment scripts:
1) tracking bitcoin payments to our addresses
2) clearing (automatic sending of money to advert addresses)
3) generating a pool of bitcoin addresses to assign to targets.

The first script will be in any clearing option; the second and third - only in automatic.

Scripts must be hosted and run on a separate server with enhanced security.
The database is interacted with over the network.


AUTOMATIC CLEARING

If you do automatic clearing, then apparently you can’t do without raising a full bitcoin node.

There is a wallet on the payment server, to which the generated bitcoin addresses are attached,
and raised a full bitcoin node.

Clearing can be carried out both directly to adverts' wallets and through mixers.
In the case of working through mixers, in the general system settings you need to specify:
- option "clearing through the mixer"
- mixer bitcoin address
- mixing time
- mixing commission
OR
the same options can be in the advert's profile (available for editing by the admin).

Three cron tasks are running:

1) checks incoming payments to each of the bitcoin addresses assigned by us to the targets,
and marks the goals as paid if the amount is sufficient.

2) for paid purposes, automatically generates outgoing payments to advert addresses
(incoming amount minus commission).

3) checks the stock of free addresses in the database, generates new addresses if necessary and adds them to the database.

All this can be done in a bunch of ways:
- a full bitcoin node has a bitcoin-cli utility that can do everything you need
- via JSON-RPC (raise on a full node)

MANUAL CLEARING

In this case, you can do without a full bitcoin node.

1) To check the payment status of a bitcoin address, you can use several approaches:
- use the native Bitcoin RPC API by connecting to a specific bitcoin server/servers.
For PHP there is already a solution out of the box:
https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29#PHP
https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list
- use the blockchain explorer API. This option is worse, because blockchain explorers often change
addresses, APIs and in general are subject to frequent changes.
For example:
https://blockchain.info/q

2) payments to adverts need to be processed manually.
To do this, in the admin panel you will need a report "For payment", in which there should be
list of addresses with amounts.
The owner of the system downloads this report daily and manually makes payments.

3) In the same way, you need to manually generate new bitcoin addresses and upload them to the admin panel,
on a separate page in the system settings.

*************************
SECOND VERSION
The following needs to be provided for:
1. we need a new loader that will load and run the load in batches (several .exe at once)
2. The pwgrab stealer needs to be adapted to reset the data in the storage:
- replace the DPOST protocol with a file transfer protocol.
- get C&C address via Emercoin DNS
- otstuk with CID bot
- The CID of the bot must be generated uniformly and unambiguously, regardless of the user,
so that you can repeat its generation in the stealer.

You probably need to completely separate pwgrab from the browsers engine,
cutting off everything unnecessary and making it minimalistic (remove the left and duplicated code).

3. There should be a section in the admin panel for viewing leaked passwords.
Binding to advert; be sure to remember the bot/machine ID.
4. Getting the C&C server address by the bot via Emercoin DNS.
