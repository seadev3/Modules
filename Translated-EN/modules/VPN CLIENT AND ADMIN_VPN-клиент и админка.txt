EN/VPN-клиент и админка.txt

VPN CLIENT AND ADMIN
TECHNICAL TASK

GOAL
Developing a VPN client for Windows with a user interface,
auto-update function, and control panel (admin panel).

CUSTOMER
The client has a simple windowed interface, with the following
controls:
* list of countries - flags and names of countries on behalf of which
the client can work.
We receive from the VPN gateway.
There is also meta-information next to each country:
best, worst and average bandwidth and ping for
gateways in this country.
* Connect/Disconnect button.

The state machine is the following:
- Disconnected: not connected.
A list of countries and a Connect button are available.
- Connecting: connect
The button says Connecting. button available,
but the transition is only possible in the Disconnected state.
The list of countries is blocked (grey color, disabled).
- Connected: connected.
The button says Connected. button available,
but the transition is only possible in the Disconnected state.
The list of countries is blocked (grey color, disabled).

In the Connected state, the ping time should be displayed,
channel bandwidth and gateway IP address.

The client is a wrapper over OpenVPN, which can receive from the control server
the necessary settings to generate the openvpn config (or even a ready-made config)
and start the openvpn process with connection start.

INSTALLER
The program should have a simple installer on NSIS.
The installer must be able to:
- check for the presence of the program in the system
- work in update mode if the program is installed.
In this case, you need to stop the process before updating.

The client itself should have a function to check for updates.
Also, there must be an automatic update check service (Windows service).

The installer must provide extension points to run arbitrary
.exe and command line scripts.
For example, there may be scripts
pre_update.bat
post_update_success.bat
post_update_error.bat
which are executed before and after the installation process (in case of success and failure, respectively).
Scripts must be present and run even if their content is empty.


CLIENT SETTINGS
- address of the control server (set during installation, later
can be corrected by auto-updates)
- login (issued when purchasing a subscription)
- password

HTTP API
The client connects to the management server (its address is one of the settings
client) HTTP request (more precisely, HTTPS - the entire exchange goes through an encrypted channel)
Apparently, in the implementation using our ready-made VPN bridge,
this API and will be merged with the API of the VPN bridge itself.

POST /api/login HTTP/1.1

request body - two fields in application/x-www-form-urlencoded package
login
password

with corresponding values

Response code 200 - success; all other codes are treated as an error.
If an error is received in the HTTP response, no further work is possible.

The body of the HTTP response contains the session identifier; all further requests
require it to be specified in the uri path. By the session ID, the server recognizes
who we are.

GET /api/<session_id>/countries HTTP/1.1

Gives a list of countries available for connection in the format:
country_code|ping_min|ping_max|bandwidth_min|bandwidth_max\r\n
country_code - two-letter international country code
ping_min - minimum ping
ping_max - maximum ping
bandwidth_min - minimum bandwidth
bandwidth_max - maximum bandwidth
All values ​​except the country are displayed in the interface as is.
The country is displayed with a flag and full name.

GET /api/<session_id>/config/<country_code>

Gives a ready-made config for openvpn in a usable form.
The connection is selected with the minimum number of users, randomly, for the selected country.
On the bridge side, the bridge must increment the user counter for the selected connection.

DELETE /api/<session_id>/config

The bridge decrements by one the number of users for the last connection issued within the specified session.
The connection is closed.
The client sends this command when the VPN connection is closed.

The bridge should handle situations where VPN connections are hanging by forcing termination and correcting
usage indicator (number of active users) on this connection.


SUBSCRIPTION MANAGEMENT AND ADMIN
To manage a subscription, you need a site where there is:
- tariff plans
- purchase of a tariff plan

As for payment, there is no specifics yet.
Let there be, for example, payment through bitcoin.
Upon successful completion of the payment, the system should add the subscriber to the database,
generate a login / password for him and send it by mail / issue it on the page.

When purchasing a tariff plan, the user receives a login and password necessary for the operation of the VPN client.
Also, you need to collect maximum information about the user with minimally intrusive means:
- IP address (you need to save two values: from the $REMOTE_ADDR variable, and the received js)
- name
- email
- OS version (this version and the following data can be pulled out with advanced js, there are examples on the network - a kind of fingerprinting)
- browser
- computer name (there are problems with getting through js)
- username (also)
In general, it is better to chop up more fields with contact info, and make them all optional (except email).

With the login issued by the system, the subscriber can enter his personal account.
The main purpose of the personal account - there is a form of payment :) to renew the subscription.
There you can also squeeze all sorts of dopas like usage statistics, etc., etc.


ADMIN
The admin panel should have the following sections:
* list of subscribers, with the ability to see detailed information on them
+ add
List:
- name
- last activity
-IP address
- expiration date (subscription expiration date)
- edit (button)
- block (button)

When opened for editing, you can see all the extended information that was collected
when registering a user.

The block button - only blocks the user (sets the current subscription end time).
Entries WILL NOT BE DELETED!

* list of VPN sessions
- Source IP Address
- VPN endpoint IP address
- started
- last activity
- disconnect


AUTO UPDATES
There is a temptation to add a button "update software" in the admin panel for each subscriber :)
 BUT!
Launching updates personally for any client or group of clients is a fairly noticeable action,
which with a high probability will block AV and attract attention.
It is recommended to execute third-party code in bulk, for all clients.
That is, the next version of the program is released, and everyone is updated to it.
Code execution is done in the installer, by extension points (the same scripts
pre_update.bat
post_update_success.bat
post_update_error.bat
which are always empty - but at the right time a code will appear in them)
If you need to exclude someone from updates, and perform the load pointwise for a specific client,
then we perform clipping directly in the load.
We have data about the client - his address, OS version - collected during his registration when subscribing.
This should be enough to set the condition in the load "if the address is not this one, we end and do nothing."

Installers on the NSIS engine (as well as installers in general) - as a rule, they immediately get a bunch of detections
on virustotal, even if they are completely harmless. This is how it happened historically - and on the NSIS page
there is an official note and clarification on this
https://nsis.sourceforge.io/NSIS_False_Positives
Therefore, in the user manual, you will need to indicate this point and recommend adding the program
in antivirus exceptions.
That is, it is a completely common practice when the installer of normal legitimate software glows with detects,
therefore, both the installer and the software are added to the AB exceptions. It won't draw attention.

That is why we go in such an intricate way - in order to maximize the life of the software, at the cost of the convenience of our work.


VPN BRIDGE IMPROVEMENT

You can use the VPN bridge to work with the following modifications:
1. The VPN bridge must check client B against the subscription base.
The original bridge did not do this and accepted any connections from trusted IP addresses.
2. You need to add a request for listing available connections to the bridge web API

In addition, it is required to make an end module on side A, to initialize the far end of the VPN tunnel (similar to module A
for the classical bridge scheme). Considering that these will be mainly Linux servers.
