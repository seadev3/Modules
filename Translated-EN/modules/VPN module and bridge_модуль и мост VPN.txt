VPN MODULE AND BRIDGE
TECHNICAL TASK


GLOSSARY
Point - in a Peer-to-Peer connection, one of the connection points. Local - the one that is closer to us; remote - the one that is farther from us.
Bridge - in this context, it is an intermediary server, or a backconnect server that switches VPN connections between themselves.


GOAL

Development of a complex similar in function to TeamViewer in VPN mode, consisting of three parts:
- the module on machine A to which we want to connect (far end);
- VPN client on machine B, with which we want to connect to machine A and its entire local network (local end);
- VPN bridge C, which accepts incoming VPN connections from A and B and routes them among themselves (router, hub).

The point of using a VPN bridge is that machine A is usually located behind a NAT / firewall and cannot be directly connected to it.
And also because incoming and outgoing TCP ports can be closed, and therefore you need to use ports like 80 and 443
for outgoing connections.
So the connection goes like this:
- A connects to B
- B connects to C
- B forwards routes between local points A and B in such a way that B sees A and its network, but not vice versa.

The emphasis here is not so much on VPN as on routing. Need a CONVENIENT way to join a remote network.
But VPN is also needed, because. Unencrypted traffic can be cut by firewalls and DPI filters.


MODULE: IMPLEMENTATION

The module is formatted according to the rules from the "module_HOWTO" document.
The module has a single config named "vpnsrv".
Config content - plain text, line separator \r\n.
There is one server address/name in the line address:port or hostname:port format.
This is the address of VPN bridge B.

It is assumed that the module is running with administrator rights.

At startup, the module acts like this:
- waits for the config with bridge addresses to be received
- random search finds a working bridge (to which it was possible to open a connection)
- if there are no working bridges, it emits the "VPN bridge failure" event and then requests its own unloading with the "WantRelease" event.
- creates a new VPN connection to bridge B using standard Windows tools ("Adapter and Sharing Control Center" - "Connect to a network").
The login to the connection is ParentID (see ParentInfo in "module_HOWTO"), the password is ParentGroup.
- starts a VPN connection to bridge B
- periodically checks the connection status (you can use a simple ping to the address of the remote point A)
- when the connection is closed, restores it
- when unloading a module by calling Release(), terminates the connection and removes it from the system.

In general, it is suggested to use the VPN client built into Windows. But you need to find a way to suppress pop-up notifications (balloons)
from the system tray, when attaching/detaching.
But here the decision is up to the developer. The regular client is offered because it is already in the OS; if there is a way to create a lightweight vpn client,
taking up to 1 megabyte in finished form and being one .dll (together with the module), then this is also a valid option.


BRIDGE: IMPLEMENTATION

Presumably, you can organize a bridge on OpenVPN.
Questions are caused by routing.
With a high degree of certainty, machines A from different organizations will have duplicate subnet addresses (192.168.0.x, 192.168.1.x, 10.0.x.x, etc.).
The same is possible for clients B behind NAT.
Therefore, if two or more independent clients (B1, B2) and a module (A1, A2) connect to the bridge at the same time, there is a high probability of a collision in routing between subnets.
The naive solution is to disable more than one A/B pair.
We need to find ways to get around this problem.

It is assumed that there is an HTTP API for managing the bridge other than OpenVPN.

The API has the following call:

GET /api/session/ParentID/ParentGroup HTTP/1.1

Here ParentID/ParentGroup are identifiers (IDs) of module A.
In response, the bridge sends in clear text the OpenVPN client config for client B, with which you can connect to its partner module A.

When processing a request, the bridge:
- remembers the ID of module A and enters the ID as a correct login / password with a lifetime of 3600 seconds (setting)
- generates a session login/password for a paired client B with a lifetime of 3600 seconds (configuration)
- generates an OpenVPN config for paired client B and sends it along with HTTP code 200
- if it is impossible to generate an OpenVPN config due to lack of data (for example, the subnet address of module A is unknown, and it is impossible to force a route to its subnet),
the bridge remembers the request and gives its number (receipt) to the client, before clarifying the data, along with the HTTP code 202 Accepted
- HTTP client periodically polls for readiness of a request with the same URI GET /api/session/ParentID/ParentGroup HTTP/1.1
and parses the response code:
200 - response ready
204 - in progress
40* - processing error
fifty*

The HTTP API should be protected with a simple tamper protection - most likely Security by obscurity - with a complex non-indexable path to the API,
or HTTP Basic Auth.

Thus, the bridge has the following functions:

1. module authorization
- The module must specify ParentID/ParentGroup as the login and password for the connection; the bridge must authorize the module.
The bridge receives a list of current logins/passwords and their lifetime in seconds via the HTTP API.
Only connections with passwords from this list can be authorized.
2. client authorization
- for the client, the bridge generates a session login / password, as well as a client config for OpenVPN and gives them through the control API.


USER SCRIPT

I, as a user, went to the dark admin panel, selected a client session with a SPECIFIC ID and group, on behalf of which I want to work.
I clicked the VPN button in the panel.

Behind the scenes, at the far end (A), the VPN module started up, received a config with the bridge address and raised a VPN connection to it, LOGINING with its ID and group.
So the bridge knows who is connected to it - it needs this to look for pairs of connections A and B.
Meanwhile, the dark admin panel pulled the web backend of the bridge via the REST API, requesting a config for the newly raised connection.
By specifying the ID and group of the bot at the same time.
The bridge generated a session login-password for a paired client VPN connection, and generated a temporary OpenVPN config (plain text file)
for pairing. And I gave it in response to a request via the REST API. The dark admin gives the config to the user.
The user receives this config and slips it to the OpenVPN client.
A pair connection is raised from the user side to the bridge.
The bridge can link a pair of connections - end (A-C) and user (B-C), because it knows both the ID and group of the bot,
identifying A-C, and the user's session password identifying B-C. The bridge posts the route in the OS's routing table.
Additional routes for the far ends of a pair of connections have already been given when setting up the corresponding connections.


INSTRUCTIONS FOR USING THE MODULE

1. We go to Lero, choose the session that is interesting to us
2. We carry out
push_back
command code 62
command parameters
vpnDllstart
3. We are waiting for the launch of the module (we look at the message messages from the module)
2020-01-16 13:25:58 vpnDll net flyAgaric Can't connect to 173.232.146.30, error 718
2020-01-16 13:25:59 vpnDll net flyAgaric VPN bridge failure


test algorithm is
1. run the software on a test machine, let it unfold
2. open his page in the Lero admin panel
3. run the push back command: 62 vpnDll start
4. wait until the module responds and look in the admin log how it works
5. in parallel, we look at what is happening on the screen
6. well, look in the admin panel http:///admin/index.php?r=vpn%2Findex for the session that the module opened
in short, a simple test - the module works if you run it in Lero with the command 62 vpnDll start and get a session in the vpn admin panel
