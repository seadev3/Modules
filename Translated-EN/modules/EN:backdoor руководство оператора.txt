EN/backdoor руководство оператора.txt

BACKDOOR
OPERATOR'S MANUAL

Backdoor is a bot with an emphasis on stealth and lightness:
- lightness: nothing superfluous, only the most necessary minimum of functionality
- two-stage loading: loader (1st stage), functionality in the main bot (2nd stage)
- the possibility of automatic and manual fixing in the system
- only the bootloader is stored on the hard disk, all AV detections are dumped onto it
- communication redundancy with C&C servers:
  - hard-wired list of gaskets
  - reserve Emercoin domains
  - generation of Emercoin domains by date
- validation of the server by crypto key (protection against interception of control by capturing the domain)
- the ability to automatically load the required bit depth (x86-> x64)
- piece-by-piece update of only individual bots
- Stealth: minimize writing to disk during any operation
- bypassing antiviruses by removing hooks
- regular cleaning

The functionality of the bot is minimal, but sufficient to run third-party tools.
Can:
- get information about the system
- run .exe
- run .dll via rundll32
- run .bat files and execute individual commands via cmd.exe
- run .ps1 files and execute individual PowerShell commands
- execute shell code
- download an arbitrary file (size limit 10M)
- kill the process
- delete from disk
The bot DOES NOT have any password stealers, injectors, grabbers, scanners, horizontal spreading, sploit and other tools.
You use either third-party manufacturers, or, if necessary, provide your own, executed as a SEPARATE SOFTWARE.
For the emphasis on lightness.

Management is carried out using the operator panel.


RECOMMENDED TACTICS

The backdoor is intended to be used as a command shell.
It's not just a launcher for your Cobalt Strike session (although that's how the backdoor is mostly used).
You can do the main thing that post-exploitation frameworks allow - to execute ANY commands.
As already available on the target machine (tactics living off the land - "life from grazing"),
as well as your private tools loaded through the admin panel on the target.
In cases where the framework session cannot be raised, there is still the opportunity to work out the goal using your skill.

Any third party tools must be packaged as an .exe or .dll with a compatible entry point.
The authors are ready to contribute in every possible way to testing tools for compatibility with the backdoor, but the initiative in this should come from the pen tester.

By default, after the first launch, the bot performs a minimum of activity - it does not try to get information about the system, it does not try to gain a foothold (if it is built as a non-resident).
All of these activities are dangerous. Enough time must pass between the start of the bot and these actions to reduce the probability of detection.
However, you can order a resident bootloader (with auto-pinning),
or you can use the command autorun function to automate these actions (see the corresponding section).
For example, you can set autorun to pause after the start at 1 hour, execute the SysInfo command, pause, execute the Anchor command (fixing).
The uniqueness of pauses/sequences on each load will complicate behavioral analysis for AB/Yara.

For each new load, you should create a new set of binaries, while changing the traffic profile and encryption keys (see the corresponding section),
thereby ensuring the uniqueness of the format of network requests and responses to the command and control server.

It is necessary to pay attention to cloaking (screening out of research requests) - see the corresponding section.
Bots that get into the Honeypots section receive 500 responses to any requests.

The bot tries to minimize disk activity as much as possible by implementing stateless behavior.
That is, without storing any configs anywhere on the disk (the C&C addresses and the group are flashed into it),
without storing your identifier (it is always generated the same for the same computer).
As a result, its lifetime is limited by the lifetime of shims (reverse proxies that protect C&C servers).
As a rule, these are weeks, sometimes months, in the worst case - a day.
In case the gaskets die, there is a cold start procedure in which the bot uses the DGA (domain name generation) algorithm to look up C&C addresses.
If it is necessary to raise bots that have died due to gaskets, system administrators should be notified about this in order to register backup domains.

The bot update function is provided for:
- replacement of the list of gaskets in the bot;
- Cleansing of AB detects.

To update you need:
- order a set of binaries with a modified version from the encoder
- give the update command "Force update now" on the required bots, specifying the new loader binary

Choose the right timeout option when executing commands/running files.
If you are raising a session of another framework, unloading a bot, in a word - starting a process that will run for a long time (forever), select the "Background run" value.
If you choose any other timeout, your command must have time to complete before it expires.
Otherwise, the command will be completed by the bot forcibly - for you it will look like "I start the session, it works for 5 minutes and breaks",
or "I downloaded another bot, it worked for 5 minutes and was nailed."

If your load does not start, but the bot survives, do an analysis of the reasons.
Check the reaction of AB, read the logs.
The Windows Defender log can be read like this (powershell):

    Get-WinEvent -LogName "Microsoft-Windows-Windows Defender/Operational" |
        Where-Object {
        $_.TimeCreated -ge '2021-01-01 00:00:00' -and
        $_.Id -in 1006,1015,1116,1117 }

****************
OPERATOR PANEL
****************

Tor login.
There are 4 bot registries in the menu:
- Bots - important bots (true)
- Unimportant - true bots with no special value (Workgroups, etc.)
- Honeypots - honeypots, cloud ABs, explorer machines
- Test Bots - bots on which testing takes place
On the right there is an icon |> - this is a transition to information on the bot card.
Bot registries have a mechanism for group execution of commands and transfer of bots between registries.

The bot page has sections:
- command builder
- info about the bot
- command history



EXECUTING COMMAND

The bot is spinning in a loop waiting for a command.
There is an interval between requests to the server "give a command".
By default, a random interval is used from 30 seconds to 2 minutes - when there are no commands from the operator - this is sleep mode.
After the operator enters the command, the bot wakes up from sleep mode.
The maximum query interval in this case is equal to the timeout value in the command builder for the selected command.
It should be understood that the result of the command execution may come before the command timeout expires - and then the actual reaction time of the bot will be less.

This is done so that inactive bots glow less in network traffic. The price for this - sometimes you have to wait.

Once again, in a simple way:
- while there are no commands, then we spin in a 5-minute command request cycle;
- when there are commands, then the speed of the tapping depends on the timeout in the previous command.

Most commands are blocking: that is, you cannot execute the next command without waiting for a response from the previous one.
In case the bot suddenly freezes, but there was no answer, it is possible to reset the command - Reset (see below).

Read more about command settings below.


NO OPERATION

This is a way to change the command request interval by a specified amount of time. In this case, the bot chooses a random interval until the next timeout in the range from single to double timeout specified in the command.
It is also a way to ping the bot.
Doesn't do anything else.

SYSTEM INFO

Gets information about the system and sends it to the server.
By default, the bot does not do this when it enters the system, so as not to glow
(requests for such information can be behavioral triggers).
The composition and format of information about the system is rigidly set at the bot level.

SYSINFO.BAT

Also gets information about the system. Unlike the "System Info" command, the data is obtained using an external bat script. The composition and format of such information is determined taking into account the preferences of the operator.
The text of the script is given in the appendix.

RUN.EXE

Launching the .exe file for execution.
Upload the file through the admin panel (or select the previously uploaded file from the history).

Further nuances:

* for the launch to succeed, the file must be statically linked (well, that is, it must not drag a bunch of .dll along with it)
for most hacking tools this is true

* select launch type:
- Process Hollowing - fileless launch #1 (preferred option, choose when we don't know what we're doing)
- Process Doppelganging - fileless launch #2 (does not work in latest versions of Windows 10)
- CreateProcess - start with dumping the file being launched to disk. Use when nothing else, or it's safe (no AB, etc.)
The file is naturally cleaned up after execution

For a fileless launch, the FILE TO BE LAUNCHED MUST BE THE SAME BIT AS the bot itself (or as the bitness of the target OS for the mode when automatic loading of the required bit depth is used).
This limitation will be lifted in future versions.

*timeout
- background run - run a command in the background and immediately switch to waiting for the next command.
So we start background services, demons, etc., etc.
The output of the command is not registered, and the bot is not interested in its fate.
- other timeout values ​​- if the command does not complete during this time, we fix the error and proceed to the next command request.
Until the command is completed, no other commands are accepted (except for Reset).
Hereinafter, for all interactive run commands, the output of the command is logged (stdout and stderr).
If the command timed out, then
- the process will be terminated forcibly and marked as terminated
- the output of the process (stdout/stderr) will be transferred to the admin panel according to the "as much as possible" principle.

All files of monitored processes are deleted after the process terminates (normally or by timeout).
For untracked processes (background run), files are not touched.

* Host Process
For a fileless launch (Process Hollowing / Process Doppelganging), you need to select a zombie process under the guise of which we will work.
You need to select a process so that for console applications the host process is also a console process (cmd.exe),
for windowed ones (compiled with the /SUBSYSTEM Windows key) it doesn't matter (there is no such restriction).

This field is irrelevant for running CreateProcess.

* Select/Upload execution file
Everything is clear here. Downloaded files are stored in history.

* Script params/PID/File name
Command line.

RUN.DLL

Run a function from the selected .dll using the rundll32.exe utility.
All parameters are the same as Run .exe; in the "Script params/PID/File name" field, enter the name and arguments of the function executed from the .dll.
Well, for example, if you enter

  Start 1 2 3 4

then the Start() function in the .dll will be executed and parameters 1, 2, 3, 4 will be passed to it

The function should be formatted like

void CALLBACK NameFuction(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow);

From Wikipedia:

Common Sources of Errors
The function called by Rundll32.exe is expected to have the following signature[6]:

void CALLBACK NameFuction(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow);
This, however, is often neglected[7] (similar examples on this page).
This often results in stack corruption[8] and unpredictable behavior such as looping.


RUN.BAT

All parameters as described before, except;
* Run Type
- Run From Memory - start fileless (from memory)
- Dump And Run - start with dumping the script to disk and deleting it after execution
* Script params/PID/File name - you can upload the script as a file
or
* Script - you can fill the script with your hands (the field is resized, mouse capture at the bottom right)

When running from memory, each script line must end with \r\n.
When running from disk, this is not critical.

RUN POWERSHELL

Everything is like in Run .bat
The script is run like this:
powershell -executionpolicy bypass -file tmpscript.ps1 %cmdline%


RESET

Designed to reset a hung command.
We tell the bot to cancel the previous command, if there was one.


FORCE UPDATE NOW

Bootloader update.
In the command, select a new file - the bot downloads and drops it to disk instead of the old bootloader file, then launches it.

RUN SHELL CODE

Execute the given shellcode within the current process.
RUN WITH EXTREME CAUTION!

Shell code is specified in hexadecimal notation, in any of the possible formats, i.e.:

aa bb cc dd ee ff..
aa bbcc dd eeff ..
aabbccddeeff ..
\xAA, \xBB, \xCC, \xDD, ..

Characters are not case sensitive.

Shell code IS NOT CHECKED IN ANY WAY BEFORE LAUNCHING!
The probability of crashing the bot is high!
This is the last resort. You must be confident in what you are doing.
It is recommended to test on a test bot first.


TERMINATE PROCESS

Kill an arbitrary process (if you have enough rights).
In Script params/PID/File name enter the PID of the process.


ANCHOR

Give the command to the bot "to gain a foothold in the system". It is used for assemblies with manual clamping mode.
If necessary, you can use manual mode for pinning instead of automatic, while pinning only the necessary bots in the system.


DOWNLOAD FILE

Request to download an arbitrary file from disk.
In the Script params/PID/File name field, enter the FULL PATH to the file.
The size limit is 10M (for now).
Needed for stealth mainly, but also because it requires significant hard disk resources on the server.


SUICIDE

Removes the bootloader and all traces of activity from the disk.
The bot itself is not saved to disk in any form.


DASHBOARD

The dashboard displays statistics on bots, broken down by groups and sections (registries) of bots.


GROUPS

Groups are needed to separate botnets of different clients, as well as to organize bots logically.
The group is stitched in the bot and cannot be changed under any circumstances.
The group is fixed in the database when the bot first logs out and is then tied to the bot ID.

BOT TRAFFIC PROFILES

To complicate the detection of a bot by its traffic, it is possible to change the type of HTTP requests for communication with C&C:
- add false Cookies to make requests unique
- change URI suffixes for exchange with C&C
- set the RSA encryption keys with which the exchange is encrypted.
Profiles change by group.

AUTOLOAD COMMANDS

It is possible to automate the processing of new bots - to form a sequence of commands that will be added to the command queue for the first bots that have tapped.
For this, the functionality "startup packages" is implemented. Groups can be divided according to the method of processing incoming bots, for each set a different sequence of commands.


CLOAKING

It is possible to automatically filter bots by country and/or address ranges by groups.
Based on the filtering rules, we determine the necessary bots, the rest will automatically fall into the Honeypots section.


GUEST ACCESS

You can restrict access for pen testers: they will not be able to see all the bots of the group, but only those with which they need to work.
To do this, it is possible to create guest accounts.
These accounts have access to certain bots, which are manually assigned by the operator.


BULK COMMAND EXECUTION

There is a mechanism for group execution of actions for several bots at the same time:
Several bots selected in the registry can be given the same command or transferred to another registry.
This reduces the number of required manual actions when executing the same type of commands.


REPORTS

VALUE REPORT

A summary of useful bots, used to evaluate activity for selected groups and dates.
There is an unloading in text format.


ПРИЛОЖЕНИЕ
РЕКОМЕНДУЕМЫЙ СКРИПТ ДЛЯ КОМАНДЫ SYSINFO.BAT

@echo off

echo General Info:
systeminfo

echo.
echo My Username:
whoami

echo.
echo Network Neighbourghoud:
net view /all

echo.
echo Domain Neighbourghoud:
net view /all /domain

echo.
echo Domain Trust:
nltest /domain_trusts /all_trusts

echo.
echo Installed Programs:
reg query hklm\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall /v "DisplayName" /s

echo.
echo Installed Programs (wow64):
reg query hklm\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall /v "DisplayName" /s

echo.
echo Installed Programs (current user):
reg query hkcu\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall /v "DisplayName" /s

echo.
echo Installed Programs (current user, wow64):
reg query hkcu\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall /v "DisplayName" /s

echo.
echo Process List:
tasklist