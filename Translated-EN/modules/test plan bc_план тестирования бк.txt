BK TESTING PLAN BEFORE ISSUANCE

1. Determine the battle group that we will distribute.
Battle groups have a numerical spelling (1, 2, 3, etc.) and are intended for combat use only.
Test groups have symbolic spelling (one, two, etc.) and are intended for development purposes, testing new functionality, finding bugs, stabilizing the code, etc.
2. We ask the encoder for a set of software for combat groups.
There should be 8 binaries in total - 4 with logs and 4 without:
- 2 binaries for the loader, 32/64
- 2 binaries per bot, 32/64
3. Put aside those with logs.
They are necessary in case an error is found in the functionality - then it will be easier for the developer to localize the problem using these binaries.
4. We crypt both loaders without logs
5. We sign both loaders and both bots without logs
6. Fill in the admin panel (in the right group!) Prepared binaries
6.1. Combat versions of the software (for combat groups) are uploaded to the admin panel only by the tester!
6.2. When uploading files, you need to register a new version number for each binary.
The version number must be specified by the developer when issuing.
7. We carry out a smoke test on each AB
7.0. there should be no log files!
loader: %HOMEPATH%\Desktop\dl2.log
bot: %HOMEPATH%\Desktop\bd2.log
loader: c:\temp\ld.log
bot: c:\temp\bd.log
If there are files, then we are testing the version with logs and it cannot be issued!
7.1. no detection
7.2. the bot tapped
7.3. the System Info command passes
7.4. if there is time, we test all commands. If there is no time, we limit ourselves to 7.3.

TEST PLAN GENERAL

We check the entire system as a whole - a resident bootloader, a backdoor, an admin panel.
In the antivirus settings, you need to disable sending samples and cloud protection, at least at first, so that the samples do not merge.

0. We receive a set of loaders from the developer - logged and non-logged versions, x86 and x64.
First we check the logged version, then the unlogged one. We check on the virtual machines located in the network.
We do this so that we can show the log for any error and call the developer to the machine.
If an error occurs when checking the unlogged version, we try to repeat it on the logged one.
If it repeats on a logged one, we fix the log and call the developer.
If it is NOT repeated on the logged version, we fix that the bug is present only on the non-logged version.
A prerequisite for the success of the test at any step is that there is no activity on the screen of the target machine (pop-ups, messages from AV, etc.),
unless otherwise specified (for example, if this is not a special assembly, which, on the contrary, shows running programs, etc. etc.).

1. Launch the loader on the target VM.
2. Go to the admin panel under the role of the operator, who has access to the group of this bot.
We are waiting for a response, within 5 minutes. If there is no tap, error, stop.
The bot should be displayed as "online" if there has been a connection with it for at least the last 15 minutes.
3. We execute commands in turn.
The first command may be delayed (up to 5 minutes) - this is normal.
3.1. Get System Info
Should receive information about the system in the corresponding tab.
3.2. Run .exe with different combinations of Run Type, Host Process (Mask) fields.
For this, we select a file that does not require third-party .dll (statically linked). For example, pscp.exe.
The command must be executed, the results of the command execution must contain the text of the output of this command.

* when the timeout = background run field is selected, the response to the command is not expected - the command is executed in the background and we are not interested in its fate.
The bot is immediately ready to receive new commands.
3.3. Run.dll
TODO
3.4. Run.bat
3.4.1. We enter some separate command, for example hostname, whoami, date / t
The command must be executed, the results of the command execution must contain the text of the output of this command.
3.4.2. Fill in the prepared .bat-file from several commands. The tester must know the result of processing this file on his machine.
The script must be executed, the output of the command must contain the text of the output of this script.
3.5. Run PowerShell
3.5.1. We enter some separate command, for example $PSVersionTable.PSVersion
(displays Powershell version)
The command must be executed, the results of the command execution must contain the text of the output of this command.
3.5.2. Fill in the prepared .ps1 file from several commands. The tester must know the result of processing this file on his machine.
The script must be executed, the output of the command must contain the text of the output of this script.
3.6. reset
Before executing this command, you need to start running something long (you can try run .bat timeout 10000),
which will block the execution of commands by the bot.
After executing the Reset, the previous blocking command must be marked as done, the bot is ready to receive the next command.
3.7. Terminate Process
The command kills a process by its number (pid)
To do this, you need to prepare a victim process (for example, run notepad.exe manually and see its number in the task manager).
After executing the command, the process should end.
3.8. download file
The command downloads a file from the target machine (up to 10M in size)
You need to enter the full path to the file in the corresponding field.
After executing the command, the file must be available for download, the link must be present in the results of the command.
3.9. suicide
The command removes the loader from the target machine.
After rebooting the machine, the bot should not tap out.
4. Fixing.
After rebooting the machine, the bot should tap into the admin panel.
5. Detects.
There should be no detections either on the loader or on the bot.
6. Update
6.1. If an x86 loader is running on an x64 machine, it must first upgrade to the x64 version of itself,
and then download only x64 bots.
In simple words, the loader must launch a bot of the maximum available bit depth.
6.2.1. We go to the admin section under the role of QA (this is the person who is responsible for releases and updates)
6.2.2. We are preparing a kit with a new version of the bot and loader, in which the same group is flashed, the same update paths.
6.2.3. We learn from the developer a line with the version of this kit. Note: each file from the kit may have its own version.
6.2.4. Fill in the panel with new versions of files, set the files to the version found in the previous step.
6.2.5. We reboot the target machine. Updates should get to the machine.
