EN/админка сканеров.txt

ADMIN AND BACKEND FOR PASSWORD AND VULNERABILITY SCANNERS
TECHNICAL TASK

PURPOSE

The system performs two functions:
1) coordination and management of a distributed network of scanners; distribution of tasks between them
2) user interface for viewing and uploading data.


GENERAL INFORMATION

There are many scanners and they are organized in a distributed network.
Every scanner needs two things:
- input data (source of the list of domains for scanning; dictionaries for enumeration, rules, etc.)
- where to send the result.

In order for the scanning efficiency to be high, the activity of scanners must be coordinated: to issue each scanner
the optimal scan area from the point of view of resource allocation.
To do this, our backend must keep a record: what is issued to whom, and what is processed by whom.

In this implementation, we will split only the list of domains into sections.
We do not split dictionaries; it is believed that the module must run the complete dictionary for each domain.

Count on the fact that there are several types of scanners. Accordingly, each type of scanner
you need your own section - in the database all data is stored in the "scanner type" section.

Current types of scanners:
- RDP scanner (API name: rdp)
- OWA (Outlook Web Access) scanner (API name: owa)
- Website Vulnerability Scanner (SQLScan) (API name: sql)

Settings for all types of scanners:
- list of domains (currently using TOP Alexa https://s3.amazonaws.com/alexa-static/top-1m.csv.zip; file format and packaging should be the same)
- size of the scan area (selected in proportion to the size of the network) - non-negative integer
- the time of saving the area for a specific scanner - a non-negative integer number of seconds; by default 4 days; then we select empirically

Settings for the RDP scanner (given in response to a request from the scanner - the names of the settings and values ​​are given):
- operating mode: mode (brute|check)
- password dictionary(s): dict (text file in gzip package)
- frequency of sending results to the server: freq (number of seconds >= 0; 0 - means immediately when the next password is ready;
  not 0 - no more than once every X seconds we expect the accumulated pack)

Settings for the OWA scanner:
- dictionary of "login:password" pairs: dict (text file in gzip packaging)

Settings for the SQLScan scanner:
- rules: rules (text file)

The size of a chunk (piece of a common list) should be calculated according to the following criteria:
- it should be as small as possible so that when new unemployed bots enter the network, they have something to give out
- the processing time of a chunk by one bot should not exceed a certain small value, for example, one hour
For example, for a single RDP thread, the worst case time for a single match could be 120 seconds. Consequently,
processing 500 "login/password" combinations will take 500*120=60000 seconds, i.e. almost a day.

The "time to save a section for a specific scanner" setting should be adjusted to the size of the chunk - it should be approximately equal to
one and a half times the time of passage of one chunk by one bot.


API BACKEND

API execute based on HTTP server.
By default, the system responds to valid requests with HTTP 200 OK,
to incorrect ones - HTTP 404 Not Found.
More broadly, anything other than 200 is considered an error state.

The server MUST always return a Content-Length header.
Avoid issuing length on Content-Disposition: chunked or on Connection: close.

All API URLs start with the group /group/clientid/
where
  group - bot group
  clientid - bot id

Before answering the request, the system must check the formal correctness of the group and ID,
and reject the request if the parameters are invalid.

Group validation: 4 to 6 characters; first 3 characters - latin in lower case, last 1..3 characters - numbers

ID Validation: This is an uppercase string consisting of two components separated by a dot.
The first part has the format <name>_XYYYYYYY, where name is some name that can somehow identify the machine
(computer name or username, depending on the type of operating system),
X - a symbol indicating the type of system on which the client is running (W - windows, L - linux, A - android, M - Mac OS),
YYYYYYY - 3-7 digits containing the major-version, minor-version and build of the operating system if the system has any
(for example, for 6.1 build 7600 it will be 617600).
The second part contains 32 random characters 0-9, A-F.
An example client id is QWERTY_W617600.11223344556677889900AABBCCDDEEFF.


GET /group/clientid/scantype/settingname HTTP/1.1
Get specific settings by setting name for a given scanner type.
Response body varies by setting

GET /group/clientid/scantype/domains HTTP/1.1
Get a plot of domains to scan.
scantype - scanner type.

The system selects the next section of the list of domains, marks it as occupied by this scanner
with a date-time stamp.
The response is a list of domains as plain text; line separator \r\n
Content-Type: text/plain

If the site was occupied by the same client,
we again give this section to the module. This is a standard situation, which means
reloading the module without saving the state.


If the area is already occupied by another scanner of the same type,
look at the "save time" setting; if the former owner of the site did not release him during this time,
and there were no signals from him, we release the site and reassign.
If the site is really busy, the response is 404 Not Found.


GET /group/clientid/scantype/over HTTP/1.1
Signal from the scanner that the area has been processed
In response, we always give HTTP 200 OK, regardless of the situation.
We check whether the site was really behind this module, if so, we mark it as processed.
If not, write an error to the log.
Response body - as per /domains request
The next free section is selected, assigned to the module, and returned in the response.
If there are no free lots, code 404 is returned.


GET /group/clientid/scantype/dict HTTP/1.1
Dictionary query for the given scanner type.
In response - a dictionary in the form in which it is loaded into the admin panel.
Content-Type: text/plain or application/gzip

POST /group/clientid/81 HTTP/1.1
Data mined by the scanner
The request body is a multipart/form-data container with the following fields:
  data - binary data up to 32k in size - this is the actual data that needs to be parsed
  source - UTF-8 string up to 4096 bytes long - contains an indication of the type of scanner (for example, "OWA Passwords")
Any other fields in the package are ignored, but are not considered an error.

By default, data receives UTF-8 text in the following format:

resource|login|password\n

End of line can be either Unix (\n) or DOS (\r\n)
  resource is the place where the password fits (e.g. URL. Or messenger type. Or host IP address. etc.).
  login
  password - clear

Such a record may contain additional fields with a separator | (vertical bar)

In response, the server should return

HTTP 200 OK
Content Type: ...
Content Length: ...

/one/


CONTROL PANEL

The control panel should contain the following sections:
* dashboard
* scanner settings
* data from scanners

On the dashboard, we see a summary of the work of scanners since the last update of the list of domains.
For each scanner, the following info:
- pie chart with "processed/not processed" percentage
- scan area size
- date-time of the last update of the list of domains
- total unique bots running on this type of scan
- total logins/vulnerabilities found

In the scanner settings, for each type of scanner, you can download data for it:
- list of domains
- dictionaries
- what else is there.
When updating the list of domains or dictionaries, the state of the allocated areas for this scanner is cleared,
all statistics are cleared (in the dashboard), and the issuance of plots starts over.
Therefore, when saving, take into account the case of no changes in the configuration, so as not to invalidate the results of the network.

In the "data from scanners" section, there is a separate tab or page for each type of scanner.
On it we see a table with fields
- date-time of release
- clientid
- group
-IP address
- received data

Fields can be sorted and filtered.

as well as the "download dump" button.
By clicking the button, we get data for the entire history of work.

***
[10:49:01] <A> Report interval, seconds hint The module will report every N seconds about its status
[10:49:35] <A> Fetch request, seconds hint The module will upload the vulnerabilities found to the server every N seconds
[10:50:44] <A> Rules rename to Scan Rules
[10:51:11] <A> hint These are the scan rules for the module. XML format is
[10:52:36] <A> <rules>
  <rule>
    <name>rule name</name>
    <type>time|diff (one of these two options)</type>
    <value1>probe value 1</value1>
    <value2>probe value 2</value2>
    <value3>probe value 3</value3>
   </rule>
   ...
   <rule>
     ...
   </rule>
</rules>

[10:52:52] <A> CHANGE IT ONLY WHEN YOU KNOW WHAT YOU ARE DOING!
[10:54:04] <A> Domains hint These are the Internet domains to scan
[10:54:22] <A> Format is: plain text file; one domain per line; line separator is \n
[10:54:26] <A> Example:
[10:54:29] <A> www.site.com
[10:54:33] <A> domain.com
[10:54:34] <A> etc
[10:55:16] <A> Thead (1..10) rename to Scan threads number (1..10)
[10:56:31] <A> Time threshold (0..40) rename to Time threshold for time difference rules, seconds (0..40)
[10:58:35] <A> hint Time difference rule finds vulnerability by comparing injected and non-injected page loading time
[10:59:05] <A> Threshold (0..1000) rename to Char threshold (0..1000) (number of characters)
[11:01:09] <A> hint This value determines injection success for difference rules. When the injected page differs from the non-injected page by this number of characters